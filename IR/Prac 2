PRACTICAL NO 2
AIM : Retrieval Models 
Implement the Boolean retrieval model and process queries. 
Implement the vector space model with TF-IDF weighting and cosine similarity.

SOLUTION:

1) Implement the Boolean retrieval model and process queries
INPUT:
documents = {
    1: "apple banana orange",
    2: "apple banana",
    3: "banana orange",
    4: "apple",
}

def build_index(docs):
    index = {}
    for doc_id, text in docs.items():
        for term in set(text.split()):
            index.setdefault(term, set()).add(doc_id)
    return index

inverted_index = build_index(documents)

def boolean_and(operands, index):
    result = index.get(operands[0], set())
    for term in operands[1:]:
        result &= index.get(term, set())
    return list(result)

def boolean_or(operands, index, total_docs):
    result = set()
    for term in operands:
        result |= index.get(term, set())
    return list(result | set(range(1, total_docs + 1)))

def boolean_not(operand, index, total_docs):
    return list(set(range(1, total_docs + 1)) - index.get(operand, set()))

query1, query2, query3 = ["apple", "banana"], ["apple", "orange"], "orange"
print("AND:", boolean_and(query1, inverted_index))
print("OR:", boolean_or(query2, inverted_index, len(documents)))
print("NOT:", boolean_not(query3, inverted_index, len(documents)))

OUTPUT:


2) Implement the vector space model with TF-IDF weighting and cosine similarity.
INPUT:
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
import nltk
from nltk.corpus import stopwords
import numpy as np
from numpy.linalg import norm

train_set = ["The sky is blue.", "The sun is bright."]
test_set = ["The sun in the sky is bright."]

nltk.download('stopwords')
stopWords = stopwords.words('english')

vectorizer = CountVectorizer(stop_words=stopWords)
trainVectorizerArray = vectorizer.fit_transform(train_set).toarray()
testVectorizerArray = vectorizer.transform(test_set).toarray()
print('Fit Vectorizer to train set', trainVectorizerArray)
print('Transform Vectorizer to test set', testVectorizerArray)

cx = lambda a, b: round(np.inner(a, b) / (norm(a) * norm(b)), 3)

for vector in trainVectorizerArray:
    print(vector)
    for testV in testVectorizerArray:
        print(testV)
        cosine = cx(vector, testV)
        print(cosine)

transformer = TfidfTransformer()
print(transformer.fit_transform(trainVectorizerArray).toarray())
print(transformer.fit_transform(testVectorizerArray).todense())

OUTPUT:

